#! /usr/bin/env bash

# ===========================================================================
#
# Copyright (c) 2022 Unvanquished Developers
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ===========================================================================

source "$(dirname "${BASH_SOURCE[0]}")/common.sh"

export DEBIAN_FRONTEND='noninteractive'

linux_architectures=(amd64 i686 arm64 armhf)
windows_architectures=(amd64 i686)
macos_architectures=(amd64)

# TODO: Remove scons and python3 onces the NaCl loader builds with CMake.
# TODO: Remove clang onces the NaCl loader builds with GCC.
# TODO: Remove unzip onces the NaCl loader archive uses another format than zip.
# or the build script is modified to use 7z when it is there.
system_packages=(
	bzip2
	curl
	git
	p7zip-full
	python3
	unzip
	xz-utils
)

# Toolchain dependencies for Unvanquished, Daemon, external_packages, or build-release.
# We removed the cmake package as it is installed from tarball.
generic_toolchain_packages=(
	autoconf
	scons
	libtool
	make
	pkg-config
	rsync
)

game_toolchain_packages=(
	python3-jinja2
	python3-yaml
)

# These are needed for building Daemon or its dependencies but not statically
# linked into the binary.
# The display-related ones are relevant for SDL configuration and are taken from
# https://wiki.libsdl.org/FAQLinux#How_do_I_get_all_the_dependencies_for_building_SDL_on_Ubuntu.3F
# The audio ones are relevant for OpenAL configuration.
linux_generic_av_packages=(
	libasound2-dev:native
	libaudio-dev:native
	libgl1-mesa-dev:native
 	libglu1-mesa-dev:native
	libjack-jackd2-dev:native
	libpipewire-0.3-dev:native
	libpulse-dev:native
	libx11-dev:native
	libxcursor-dev:native
	libxext-dev:native
	libxi-dev:native
	libxinerama-dev:native
	libxrandr-dev:native
	libxss-dev:native
	libxxf86vm-dev:native
)

declare -a alternative_pairs

build_vm="${build_vm:-false}"
build_linux="${build_linux:-false}"
build_windows="${build_windows:-false}"
build_macos="${build_macos:-false}"

build_in_linux='false'
build_in_darling='false'
build_breakpad='false'

if "${build_vm}"
then
	build_in_linux='true'
	build_breakpad='true'

	system_packages+=(${generic_toolchain_packages[@]})
	system_packages+=(${game_toolchain_packages[@]})
fi

if "${build_linux}"
then
	build_in_linux='true'
	build_breakpad='true'

	system_packages+=(${generic_toolchain_packages[@]})

	# The nasm package is required to build amd64 and i686 deps.
	# The scons and clang packages are required for building the amd64 nacl loader.
	system_packages+=(nasm scons clang)

	# The no alias g++-x86-64-linux-gnu package on amd64 in Debian before
	# Trixie, but we install g++ and we run on amd64 so this is fine.
	system_packages+=(binutils-multiarch) 
	# system_packages+=(g++-x86-64-linux-gnu)
	system_packages+=(g++-i686-linux-gnu)
	system_packages+=(g++-aarch64-linux-gnu)
	system_packages+=(g++-arm-linux-gnueabihf)
fi

if "${build_windows}"
then
	build_in_linux='true'
	build_breakpad='true'

	system_packages+=(${generic_toolchain_packages[@]})

	system_packages+=(nasm)

	system_packages+=(g++-mingw-w64-x86-64)
	alternative_pairs+=('x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix')
	alternative_pairs+=('x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix')

	system_packages+=(g++-mingw-w64-i686)
	alternative_pairs+=('i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix')
	alternative_pairs+=('i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix')
fi

if "${build_macos}"
then
	build_in_darling='true'

	system_packages+=(gdebi-core)
fi

if "${build_breakpad}"
then
	# The breakpad dump_syms binaries are built with the native g++.
	system_packages+=(g++)
fi

if "${build_linux}"
then
	for arch_name in "${linux_architectures[@]}"
	do
		arch_name="${arch_name/i686/i386}"

		_exec dpkg --add-architecture "${arch_name}"

		for native_package in "${linux_generic_av_packages[@]}"
		do
			system_packages+=("${native_package//:native/:${arch_name}}")
		done
	done
fi

install_extra=(--verbose-versions --yes)

_exec apt-get update

_exec apt-get install "${install_extra[@]}" lsb-release

# SDL3 asks for libdecor to make sure of always having a way
# to render window decorations, but it is only available in
# backports in Bullseye.
# It's not a bad idea to rely on backports anyway, they provide
# newer packages still retaining compatibility with the libc.
distro_id="$(lsb_release --short --id 2>/dev/null)"
distro_codename="$(lsb_release --short --codename 2>/dev/null)"

has_backports='false'

case "${distro_id}" in
'Debian')
	has_backports='true'

	case "${distro_codename}" in
		'bullseye')
			archive_url='https://archive.debian.org/debian-archive/debian'
			;;
		*)
			archive_url='http://deb.debian.org/debian'
			;;
		esac
	;;
'Ubuntu')
	has_backports='true'
	archive_url='http://archive.ubuntu.com/ubuntu'
	;;
esac

if "${has_backports}"
then
	backports_suite="${distro_codename}-backports"
	list_entry="deb ${archive_url} ${backports_suite} main"
	list_file="/etc/apt/sources.list.d/${distro_id,,}-${distro_codename}-backports.list"
	echo "${list_entry}" | _exec dd status=none of="${list_file}"
	install_extra+=(--target-release "${backports_suite}")
fi

_exec apt-get update

_exec apt-get install "${install_extra[@]}" "${system_packages[@]}"

for alternative_pair in "${alternative_pairs[@]}"
do
	_exec update-alternatives --set ${alternative_pair}
done

if "${build_in_darling}"
then
	if [ ! -f /usr/bin/darling ]
	then
		darling_url='https://github.com/darlinghq/darling/releases/download/v0.1.20220929_update_sources_11_5/darling_0.1.20220929.focal_amd64.deb'

		_exec curl --location --output /darling.deb "${darling_url}"
		_exec gdebi --non-interactive /darling.deb
		_exec rm /darling.deb
	fi
fi

if "${build_in_linux}"
then
	if [ ! -d /cmake ]
	then
		cmake_version='3.31.8'
		cmake_system='linux-x86_64'
		cmake_dir="cmake-${cmake_version}-${cmake_system}"
		cmake_url="https://github.com/Kitware/CMake/releases/download/v${cmake_version}/${cmake_dir}.tar.gz"

		_exec curl --output cmake.tgz --location "${cmake_url}"
		_exec tar xf cmake.tgz
		_exec rm cmake.tgz
		_exec mv "${cmake_dir}" /cmake
		_exec ln -s /cmake/bin/cmake /usr/local/bin/cmake
	fi
fi
